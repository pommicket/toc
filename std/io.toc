get_type_with_size ::= fn(size :: i64) Type {
	if size == 1 { i8 }
	elif size == 2 { i16 }
	elif size == 4 { i32 }
	elif size == 8 { i64 }
	else { f32 }
};

get_utype_with_size ::= fn(size :: i64) Type {
	if size == 1 { u8 }
	elif size == 2 { u16 }
	elif size == 4 { u32 }
	elif size == 8 { u64 }
	else { f32 }
};

c_int ::= get_type_with_size(#builtin("sizeof int"));
c_size_t ::= get_utype_with_size(#builtin("sizeof size_t"));

c_putchar :: fn(c_int) c_int = #foreign "putchar", "libc.so.6";
toc_putchar ::= fn(x: char) {
		c_putchar(x as c_int);
};

c_fwrite :: fn(&u8, c_size_t, c_size_t, &u8) = #foreign "fwrite", "libc.so.6";

stdout_fwrite ::= fn(data: &u8, size: u64, nmemb: u64) {
	c_fwrite(data, size as c_size_t, nmemb as c_size_t, #builtin("stdout"));
};

puts ::= fn(x: []char) {
		stdout_fwrite(&x[0] as &u8, 1, x.len as u64);
		toc_putchar('\n');
};
